{"ast":null,"code":"var _jsxFileName = \"/Users/josh/Documents/VS Code/Projects/chat-app/client/src/pages/Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport axios from 'axios';\nimport { contactRoute, createMessageRoute, getMessageRoute } from '../utils/apiRoutes';\nimport Contacts from '../components/Contacts/Contacts';\nimport MessageInput from '../components/Messages/MessageInput';\nimport MessageDisplay from '../components/Messages/MessageDisplay';\nimport Header from '../components/Header/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Chat() {\n  _s();\n\n  const [contacts, setContacts] = useState();\n  const [user, setUser] = useState();\n  const [selected, setSelected] = useState();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState();\n  const socket = useRef();\n  const navigate = useNavigate();\n  useEffect(() => {\n    socket.current = io('ws://localhost:5000');\n    socket.current.on('receive-msg', data => {\n      setNewMessage({\n        sender: data.sender,\n        recipient: data.recipient,\n        body: data.body\n      });\n    });\n  }, []);\n  useEffect(() => {\n    newMessage && setMessages(prev => [...prev, newMessage]);\n  }, [newMessage, selected]); //Checks to see if user is logged in, redirects to login page if not\n\n  useEffect(() => {\n    if (!localStorage.getItem('user')) {\n      navigate('/login');\n    } else {\n      const userInfo = JSON.parse(localStorage.getItem('user'));\n      setUser(userInfo); //Joins socket room with user id\n      //socket.emit('join', {id: (user ? user._id : null)});\n    }\n  }, [navigate]); // Gets contact list for logged in user\n\n  useEffect(() => {\n    if (user) {\n      axios.get(`${contactRoute}/${user._id}`).then(data => {\n        setContacts(data.data);\n      });\n    }\n  }, [user]); //Shows different chats depending on selected contact\n\n  const handleSelectedChange = async selected => {\n    setSelected(selected);\n    const {\n      data\n    } = await axios.post(getMessageRoute, {\n      recipient: user._id,\n      sender: selected._id\n    });\n    let selectedMessages = data.filter((item, index) => {\n      return item.sender === selected._id && item.recipient === user._id || item.recipient === selected._id && item.sender === user._id;\n    });\n    setMessages(selectedMessages);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    navigate('/login');\n  };\n\n  const handleMessageSend = async message => {\n    try {\n      const {\n        data\n      } = await axios.post(createMessageRoute, {\n        body: message,\n        sender: user._id,\n        recipient: selected._id\n      });\n      socket.current.emit('send-msg', {\n        body: message,\n        sender: user._id,\n        recipient: selected._id,\n        status: true\n      });\n\n      if (data.status) {\n        setMessages(prev => [...prev, data.data]);\n      }\n    } catch (ex) {\n      console.log(ex);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      user: user,\n      logout: logout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Contacts, {\n        contacts: contacts,\n        user: user,\n        changeSelected: handleSelectedChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(MessageDisplay, {\n        messages: messages,\n        selected: selected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        user: user,\n        selected: selected,\n        sendMessage: handleMessageSend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(messages),\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Chat, \"w5g7juL7mcmyn4qICVHCUDyicGk=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","io","axios","contactRoute","createMessageRoute","getMessageRoute","Contacts","MessageInput","MessageDisplay","Header","Chat","contacts","setContacts","user","setUser","selected","setSelected","messages","setMessages","newMessage","setNewMessage","socket","navigate","current","on","data","sender","recipient","body","prev","localStorage","getItem","userInfo","JSON","parse","get","_id","then","handleSelectedChange","post","selectedMessages","filter","item","index","logout","removeItem","handleMessageSend","message","emit","status","ex","console","log"],"sources":["/Users/josh/Documents/VS Code/Projects/chat-app/client/src/pages/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport axios from 'axios';\nimport {\n\tcontactRoute,\n\tcreateMessageRoute,\n\tgetMessageRoute,\n} from '../utils/apiRoutes';\nimport Contacts from '../components/Contacts/Contacts';\nimport MessageInput from '../components/Messages/MessageInput';\nimport MessageDisplay from '../components/Messages/MessageDisplay';\nimport Header from '../components/Header/Header';\n\nfunction Chat() {\n\tconst [contacts, setContacts] = useState();\n\tconst [user, setUser] = useState();\n\tconst [selected, setSelected] = useState();\n\tconst [messages, setMessages] = useState([]);\n\tconst [newMessage, setNewMessage] = useState();\n\tconst socket = useRef();\n\tconst navigate = useNavigate();\n\n\tuseEffect(() => {\n\t\tsocket.current = io('ws://localhost:5000');\n\t\tsocket.current.on('receive-msg', (data) => {\n\t\t\tsetNewMessage({\n\t\t\t\tsender: data.sender,\n\t\t\t\trecipient: data.recipient,\n\t\t\t\tbody: data.body,\n\t\t\t});\n\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tnewMessage && setMessages((prev) => [...prev, newMessage]);\n\t}, [newMessage, selected]);\n\n\t//Checks to see if user is logged in, redirects to login page if not\n\tuseEffect(() => {\n\t\tif (!localStorage.getItem('user')) {\n\t\t\tnavigate('/login');\n\t\t} else {\n\t\t\tconst userInfo = JSON.parse(localStorage.getItem('user'));\n\t\t\tsetUser(userInfo);\n\t\t\t//Joins socket room with user id\n\t\t\t//socket.emit('join', {id: (user ? user._id : null)});\n\t\t}\n\t}, [navigate]);\n\n\t// Gets contact list for logged in user\n\tuseEffect(() => {\n\t\tif (user) {\n\t\t\taxios.get(`${contactRoute}/${user._id}`).then((data) => {\n\t\t\t\tsetContacts(data.data);\n\t\t\t});\n\t\t}\n\t}, [user]);\n\n\t//Shows different chats depending on selected contact\n\tconst handleSelectedChange = async (selected) => {\n\t\tsetSelected(selected);\n\t\tconst { data } = await axios.post(getMessageRoute, {\n\t\t\trecipient: user._id,\n\t\t\tsender: selected._id,\n\t\t});\n\t\tlet selectedMessages = data.filter((item, index) => {\n\t\t\treturn (\n\t\t\t\t(item.sender === selected._id && item.recipient === user._id) ||\n\t\t\t\t(item.recipient === selected._id && item.sender === user._id)\n\t\t\t);\n\t\t});\n\t\tsetMessages(selectedMessages);\n\t};\n\n\tconst logout = () => {\n\t\tlocalStorage.removeItem('user');\n\t\tnavigate('/login');\n\t};\n\n\tconst handleMessageSend = async (message) => {\n\t\ttry {\n\t\t\tconst { data } = await axios.post(createMessageRoute, {\n\t\t\t\tbody: message,\n\t\t\t\tsender: user._id,\n\t\t\t\trecipient: selected._id,\n\t\t\t});\n\t\t\tsocket.current.emit('send-msg', {\n\t\t\t\tbody: message,\n\t\t\t\tsender: user._id,\n\t\t\t\trecipient: selected._id,\n\t\t\t\tstatus: true,\n\t\t\t});\n\t\t\tif (data.status) {\n\t\t\t\tsetMessages((prev) => [...prev, data.data]);\n\t\t\t}\n\t\t} catch (ex) {\n\t\t\tconsole.log(ex);\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Header user={user} logout={logout} />\n\t\t\t<div className='container'>\n\t\t\t\t<Contacts\n\t\t\t\t\tcontacts={contacts}\n\t\t\t\t\tuser={user}\n\t\t\t\t\tchangeSelected={handleSelectedChange}\n\t\t\t\t/>\n\t\t\t\t<MessageDisplay messages={messages} selected={selected} />\n\t\t\t\t<MessageInput\n\t\t\t\t\tuser={user}\n\t\t\t\t\tselected={selected}\n\t\t\t\t\tsendMessage={handleMessageSend}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<button onClick={() => console.log(messages)}>Test</button>\n\t\t</>\n\t);\n}\n\nexport default Chat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}