{"ast":null,"code":"var _jsxFileName = \"/Users/josh/Documents/VS Code/Projects/chat-app/client/src/pages/Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport io from \"socket.io-client\";\nimport axios from 'axios';\nimport { contactRoute, createMessageRoute, getMessageRoute } from '../utils/apiRoutes';\nimport Contacts from '../components/Contacts/Contacts';\nimport MessageInput from '../components/Messages/MessageInput';\nimport MessageDisplay from '../components/Messages/MessageDisplay';\nimport Header from '../components/Header/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Chat() {\n  _s();\n\n  const [contacts, setContacts] = useState();\n  const [user, setUser] = useState();\n  const [selected, setSelected] = useState();\n  const [messages, setMessages] = useState([]);\n  const socket = io.connect(\"http://localhost:5000\");\n  const navigate = useNavigate();\n  useEffect(() => {\n    socket.on(\"receive-msg\", data => {\n      console.log(data);\n      setMessages(prev => [...prev, data]);\n      console.log(messages);\n    });\n  }, [socket]); //Checks to see if user is logged in, redirects to login page if not\n\n  useEffect(() => {\n    if (!localStorage.getItem('user')) {\n      navigate('/login');\n    } else {\n      const userInfo = JSON.parse(localStorage.getItem('user'));\n      setUser(userInfo); //Joins socket room with user id\n      //socket.emit('join', {id: (user ? user._id : null)});\n    }\n  }, [navigate]); // Gets contact list for logged in user\n\n  useEffect(() => {\n    if (user) {\n      axios.get(`${contactRoute}/${user._id}`).then(data => {\n        setContacts(data.data);\n      });\n    }\n  }, [user]); //Shows different chats depending on selected contact\n\n  const handleSelectedChange = async selected => {\n    setSelected(selected);\n    const {\n      data\n    } = await axios.post(getMessageRoute, {\n      recipient: user._id,\n      sender: selected._id\n    });\n    let selectedMessages = data.filter((item, index) => {\n      return item.sender === selected._id && item.recipient === user._id || item.recipient === selected._id && item.sender === user._id;\n    });\n    setMessages(selectedMessages);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    navigate('/login');\n  };\n\n  const handleMessageSend = async message => {\n    try {\n      const {\n        data\n      } = await axios.post(createMessageRoute, {\n        body: message,\n        sender: user._id,\n        recipient: selected._id\n      });\n      socket.emit(\"send-msg\", {\n        body: message,\n        sender: user._id,\n        recipient: selected._id\n      });\n\n      if (data.status) {\n        setMessages(prev => [...prev, data]);\n      }\n    } catch (ex) {\n      console.log(ex);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      user: user,\n      logout: logout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Contacts, {\n        contacts: contacts,\n        user: user,\n        changeSelected: handleSelectedChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(MessageDisplay, {\n        messages: messages,\n        selected: selected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        user: user,\n        selected: selected,\n        sendMessage: handleMessageSend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(messages),\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Chat, \"pbxe1Q2Az/idRcgcbpRqMtU4X+c=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","io","axios","contactRoute","createMessageRoute","getMessageRoute","Contacts","MessageInput","MessageDisplay","Header","Chat","contacts","setContacts","user","setUser","selected","setSelected","messages","setMessages","socket","connect","navigate","on","data","console","log","prev","localStorage","getItem","userInfo","JSON","parse","get","_id","then","handleSelectedChange","post","recipient","sender","selectedMessages","filter","item","index","logout","removeItem","handleMessageSend","message","body","emit","status","ex"],"sources":["/Users/josh/Documents/VS Code/Projects/chat-app/client/src/pages/Chat.jsx"],"sourcesContent":["import React, { useState , useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport io from \"socket.io-client\";\nimport axios from 'axios';\nimport { contactRoute, createMessageRoute, getMessageRoute } from '../utils/apiRoutes';\nimport Contacts from '../components/Contacts/Contacts';\nimport MessageInput from '../components/Messages/MessageInput';\nimport MessageDisplay from '../components/Messages/MessageDisplay';\nimport Header from '../components/Header/Header';\n\nfunction Chat() {\n\n    const [contacts, setContacts] = useState();\n    const [user, setUser] = useState();\n    const [selected, setSelected] = useState();\n\tconst [messages, setMessages] = useState([]);\n\tconst socket = io.connect(\"http://localhost:5000\");\n\n    const navigate = useNavigate();\n\n\tuseEffect(() => {\n\t\tsocket.on(\"receive-msg\", (data) => {\n\t\t\tconsole.log(data)\n\t\t\tsetMessages((prev) => [...prev, data])\n\t\t\tconsole.log(messages)\n\t\t})}, [socket]);\n\n\t//Checks to see if user is logged in, redirects to login page if not\n    useEffect(() => {\n    \tif(!localStorage.getItem('user')) {\n        navigate('/login');\n\t\t}\n\t\telse {\n\t\t\tconst userInfo = JSON.parse(localStorage.getItem('user'));\n\t\t\tsetUser(userInfo);\n\t\t\t//Joins socket room with user id\n\t\t\t//socket.emit('join', {id: (user ? user._id : null)});\n\t\t}\n    },[navigate]);\n\n\t// Gets contact list for logged in user\n    useEffect(() => {\n      if(user) {\n        axios.get(`${contactRoute}/${user._id}`)\n          .then((data) => {\n            setContacts(data.data);\n          })\n      }\n    }, [user])\n\n\n\t//Shows different chats depending on selected contact\n    const handleSelectedChange = async (selected) => {\n\t\tsetSelected(selected)\n\t\tconst { data } = await axios.post(getMessageRoute, {\n\t\t\trecipient: user._id,\n\t\t\tsender: selected._id\n\t\t\t})\n\t\tlet selectedMessages = data.filter((item, index) => {\n\t\t\treturn (item.sender === selected._id && item.recipient === user._id) || (item.recipient === selected._id && item.sender === user._id)\n\t\t})\n\t\tsetMessages(selectedMessages)\n    };\n\n    const logout = () => {\n      localStorage.removeItem('user');\n\t  navigate('/login')\n    };\n\n    const handleMessageSend = async (message) => {\n\n\t\ttry{\n\t\t\tconst { data } = await axios.post(createMessageRoute, {\n\t\t\t\tbody: message,\n\t\t\t\tsender: user._id,\n\t\t\t\trecipient: selected._id\n\t\t\t})\n\t\t\tsocket.emit(\"send-msg\", {\n\t\t\t\tbody: message,\n\t\t\t\tsender: user._id,\n\t\t\t\trecipient: selected._id\n\t\t\t})\n\t\t\tif (data.status) {\n\t\t\t\tsetMessages((prev) => [...prev, data])\n\t\t\t}\n\t\t}catch(ex){\n\t\t\tconsole.log(ex)\n\t\t}\n    }\n\n    return (\n\t\t<>\n\t\t\t<Header user={user} logout={logout}/>\n\t\t\t<div className='container'>\n\t\t\t\t<Contacts contacts={contacts} user={user} changeSelected={handleSelectedChange}/>\n\t\t\t\t<MessageDisplay messages={messages} selected={selected}/>\n\t\t\t\t<MessageInput user={user} selected={selected} sendMessage={handleMessageSend}/>\n\t\t\t</div>\n\t\t\t<button onClick={() => console.log(messages)}>Test</button>\n\t\t</>\n\t)\n       \n}\n\nexport default Chat"],"mappings":"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"},"metadata":{},"sourceType":"module"}